"""
THIS IS FINE

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@#####@@@@@@@@@@@@@#@@@@@@@@@@@@@@@###@@@@@@@@@@@@@@@@@#######@
###@@@@@@@@@@#############################@@@@@@###########@@@@@@@@@############
###@#######@###############@@##########@################@@@@@@@###@####@#####@@@
############@###@@@@@@@#####@..+@@@+`    @@########@@@#####@##@@###@@@##########
#######@#####@@@#######@@@;                      ;;;;;;';'';;;;@@@######@+  ;@@@
@####@:                                          '';#########+;;    ``
                             `,:''               ;;;#########+;@
            @@@@@@@@@@@@@@@@@@@@@@               ;;;##@######';#
            @                  @@@               ';;####@####;;@
      @`    @        `      `  @@@               ;;;######@##''@
     @@@    @     #@@       @;::@@               ;;;#########;'@          @
    @@@@@   @   #@@@.   @  @:::;+@@:'`           ;;;#####@##@;;@          @@:
   @@@@@@   @  @@@@@    @@  ;@@@@;::;`           ;';''''''+#;;;.          .@@`
  @@@@@@#   @ @@@@@@   @@@@::::::::#+;;;@        #;;;;;;;;;;;;@            @@@
  @@@@@@@   @@@@,@@@  ;@@@@@:::;+@;;::::@'#.                              ,@@@
@.@@@,@@@   @@@,,:@@@ @@:,@@ @;;:+#;;:+  @@@@                   '         @@@@`@
@@@@@,@@@ ' @@@,,,@@@@@@,,,@@@;+ .. @;@ @@@@+                 @@         @@@@@@@
@@@@@,@@  @+'@,,,,,@@@@,,@@@@@: '@@@ @+` @@@@#@@@@@@+       ;@@#        @@@:@@@@
@@@@@,@@  @@#,,,,,,,:@,,@@@@@@: @@@@ #:;+::::;@@@@@@@      @@#@@       @@@,,@@@@
,@@@@,@@  @@@:,,,,,,,,,@@@@@@@;+   `@;;:;::::;;@@@@@     `@@,'@@+     #@@#,,+@@,
,,@@,,@@ ,@@@@,,,,,,,,:@@@@@@:::::::::;+##:;;;;::++ ,   @@@,@++++++#@ @@@:,,,@,,
,,,,,@@+ @@@@@,,,,,,,+''@@@#;;:::::;:;:::;@  ..`   @@  @@@,,@,;@@@+,@.,@@,,,,,,,
,,,,,@@@ @@@@@,,,,,,:+''@'@;::;;:;;:::::::@       @@@ @#@,,,#,......@,,
,,,,,@@@#@@@@@,,,,,,,'''@'@;;;@;@;::::::;;'@     .@@@@#@,,  @,......@'
,,,,,'@@@@@,@@,,,,,::+''@'@;;;+;@;:::::::;;'     '@@:@@;    @:....,.@
,,,,,,@@@@@,@@::::::,@''@''';;:+;#:::;:::;+:,    :@@,,@,,
,,,,,,:@@@,,@@:::::::@''''+@';;;#;'@@@@@'#:#@#   `@@:,,,,,,,,,,.,,,,,,,,,,,,,,,,
,,,,,,,+@,,,@@;;;;'',:@''''''@#;;;;;#@;;@''#:; , `@@+,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,@,,,:,,:@@::::,,::::@''''''''''''@;::#@@;:;;@.@@#,,,,,,,,,,,.,,@@,,,,,,,,,,@
,,,,;,,,,,,:@@::::@@,:::,@@@####@@@@@@;:;;#@#@@  @@@,,,,,,,,@@@@##@@@########@@@
,,,,:,,,,,,,@@'::@@@:::::::#''+++++@@@##@@@@@@@#@@@@,,,@@,,,@@@@@@@@@#######@@@@
,,,,,,,,,,,,@@@,@@@@@:,::::+''+::,,@@@'':+@@@:::@@,,;@:@,,,,@@@@@@@@@######@@@@:
,,;,,+,,,,,,,@@@@@'@@,:,@,,,''+::::@@@'':'@@@::,:::::,@#+:,#@@@@@@@@#####@@@@@+,
,,+,,@,,#,@,,,@@@@,@@@,@@:::''+:::,@@@''::@@@::::::::::::@@@#@+,@@@@####@@@@@@,,
,,,,,;,,:,,,,,,@@@,,@@@@@:::'''::::@@@'',:@@@:::::::,::#@@@@@,,,@@@@##@@@@@@@,,,
,,,,,,',,#,;,,,,:@,,,#@@@:::#@:::::,:@''::@@,::::::::;@@@@@;,,,,@@@@@@@@@@@:,,,,
,,,,,,,,,,,,,,,,,,,,,,,@##:,,::::::::,::::::::::::::,@@@#@:,,,,,:@@@@@@@@,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,'@:::::::::::,::::::::::::::,@@@@@@,,,,,,,,'@@@@,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,:@::::::::::::::::::::::::::::,@@@@@,,,,,,,,,,,;#,,,,,,,,,,
"""

import re

re_eval = re.compile(r'{{\s*(.*?)\s*}}')
re_chunk = re.compile(r'{%\s*(?P<ctype>\w+)(?P<cargs>.*)\s*%}(?P<chunk>[\s\S]*){%\s*end(?P=ctype)\s*%}')


def template_eval(match, context):
    match = match.group(1)
    return str(eval(match, context))


def template_chunk(match, context):
    chunk = match.group('chunk')
    chunk_type = match.group('ctype')
    chunk_args = match.group('cargs').strip() or None
    return render(chunk, context, chunk_type, chunk_args)


def render(template, context, chunk_type=None, chunk_args=None):
    template_copy = template

    def template_eval_with_context(match):
        """
        Partial of template_eval
        """
        return template_eval(match, context)

    def template_chunk_with_context(match):
        """
        Partial of template_chunk
        """
        return template_chunk(match, context)

    if chunk_type == 'spaceless':
        return ''.join(line.strip() for line in template.splitlines())

    if chunk_type == 'for':
        var, iterable = chunk_args.split('in', 1)
        var = var.strip()
        iterable = eval(iterable.strip(), context)

        evaled_for = ''
        for i in iterable:
            context[var] = i
            evaled_for += render(template, context)
        return evaled_for
    template = re_chunk.sub(template_chunk_with_context, template)

    if template_copy == template:
        template = re_eval.sub(template_eval_with_context, template)
        return template
    else:
        return render(template, context)
